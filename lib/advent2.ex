require IEx;

defmodule Advent2 do
  def code do
    #"LRULLRLDUUUDUDDDRLUDRDLDDLUUDLDDLRDRLDRLLURRULURLDRLDUDURLURRULLDDDUDDRRRDLRRDDLDURDULLRDLLLDRDLLDULDUDLLDLDRUDLLDLDDRRRDRLUDRDDLUDRRDUDUDLLDDUUDLRDUDRRUDUDRULRULUDRUUDLDLULLRLDLDDRULLRLLLULUULDURURLUUULDURLDDDURRUUDURDDDULDLURLRDRURDRUDRLLDLDRUURLLLRDRURUDLRLUDULLDDURLRURDLRDUUURRLULRRLDDULUUURLRRRLLLLLURDDRUULUDRRRUDDLLULRRUULDRDDULRLDDDRRUULUDRLRUDURUUULDLDULUUDURLLLRRDDRDLURDDDLDDDLRDRLDDURLRLLRUDRRLLDDDDDURDURRDDULDULLRULDRUURDRRDUDDUDDDDRRDULDUURDRUDRLDULRULURLLRRDRDRDLUUDRRLRLDULDDLUUUUUURRLRRRULLDDDRLRDRRRRRRRDUUDLLUDURUDDLURRUDL"
    #"UDUUURRLRLLDDRRDRRRLDDDLURURLLUDDRLUUDRRRDURRLLRURDLLRRDUUDDDDRDRURRLLLLURDLRRRULLLDLLLUDDLDRRRDLDUUDDRDUDDUURDDLULULDURDURDRUULURURRURDUURUDRRUDRLLLLRRDLLDRDDRLLURDDDUDUDUDRUURDDRUURDLRUUDDRDUURUDDLLUURDLUDRUUDRRDLLUUURDULUULDUUDLLULUUDLUDRUUDUUURLDDDRLRURDDULLRDRULULUDLUUDDDUUDLDUUDRULLDUURDDRUDURULDRDDLRUULRRRDLDLRDULRDDRLLRRLURDLDRUDLRLUDLRLDLDURRUULRLUURDULDRRULLRULRDLLDLDUDRUDDUDLDDURDDDRDLUDRULRUULLRURLDDDRDLRRDRULURULDULRDLDULDURDRDRDRDURDRLUURLRDDLDDRLDDRURLLLURURDULDUDDLLUURDUUUDRUDDRDLDRLRLDURRULDULUUDDLRULDLRRRRDLLDRUUDRLLDLUDUULRDRDLRUUDLRRDDLUULDUULRUDRURLDDDURLRRULURR"
    #"LDURLLLRLLLUURLLULDLRLLDLURULRULRDUDLDDUDRLRRDLULLDDULUUULDRLDURURLURLDLRUDULLLULDUURLLRDLUULRULLLULRDRULUDLUUULDDURLUDDUDDRDLDRDRUDLUURDDLULDUULURLUULRDRDLURUDRUDLDRLUUUUULUDUDRRURUDRULDLDRDRLRURUUDRDLULLUDLLRUUDUUDUDLLRRRLDUDDDRDUDLDLLULRDURULLLUDLLRUDDUUDRLDUULLDLUUDUULURURLLULDUULLDLUDUURLURDLUULRRLLRUDRDLLLRRRLDDLUULUURLLDRDLUUULLDUDLLLLURDULLRUDUUULLDLRLDRLLULDUDUDRULLRRLULURUURLRLURRLRRRDDRLUDULURUDRRDLUDDRRDRUDRUDLDDRLRDRRLDDRLLDDDULDLRLDURRRRRULRULLUUULUUUDRRDRDRLLURRRRUULUDDUDDDLDURDRLDLLLLLRDUDLRDRUULU"
    #"URURRUUULLLLUURDULULLDLLULRUURRDRRLUULRDDRUDRRDUURDUDRUDDRUULURULDRLDRDDDLDLRLUDDRURULRLRLLLDLRRUDLLLLRLULDLUUDUUDRDLRRULLRDRLRLUUDDRRLLDDRULLLRLLURDLRRRRRLLDDRRDLDULDULLDLULLURURRLULRLRLLLLURDDRDDDUUDRRRDUUDDLRDLDRRLLRURUDUUUDLDUULLLRLURULRULRDRLLLDLDLRDRDLLLRUURDDUDDLULRULDLRULUURLLLRRLLLLLLRUURRLULRUUUDLDUDLLRRDDRUUUURRRDRRDULRDUUDULRRRDUUUUURRDUURRRRLDUDDRURULDDURDDRDLLLRDDURUDLLRURLRRRUDDLULULDUULURLUULRDLRDUDDRUULLLRURLDLRRLUDLULDRLUDDDRURUULLDLRLLLDULUDDRLRULURLRDRRDDLDLURUDDUUURRDDLUDDRDUULRRDLDRLLLULLRULRURULRLULULRDUD"
    "RUDLLUDRRDRRLRURRULRLRDUDLRRLRDDUDRDLRRLLRURRDDLRLLRRURULRUULDUDUULDULDLRLRDLRDLRUURLDRLUDRRDDDRDRRRDDLLLRRLULLRRDDUDULRDRDUURLDLRULULUDLLDRUDUURRUDLLRDRLRRUUUDLDUDRRULLDURRDUDDLRURDLDRLULDDURRLULLRDDDRLURLULDLRUDLURDURRUDULDUUDLLLDDDUUURRRDLLDURRDLULRULULLRDURULLURDRLLRUUDDRRUDRDRRRURUUDLDDRLDRURULDDLLULULURDLDLDULLRLRDLLUUDDUDUDDDDRURLUDUDDDRRUDDLUDULLRDLDLURDDUURDLRLUUDRRULLRDLDDDLDULDUDRDUUULULDULUDLULRLRUULLDURLDULDRDLLDULLLULRLRD"
  end

  def codecrack do
    final = code
            |> String.split(~r{}, trim: true)
            |> Enum.flat_map_reduce(["","5"], fn i, acc ->
              a = move(i, acc)
              {[i],a}
            end)
    List.last(elem(final,1))
  end

  @boundaries %{"U": ["1","2","3"], "L": ["1","4","7"], "R": ["3","6","9"], "D": ["7","8","9"]}

  defp move(next_position, accumulator) do
    curr_position = List.last(accumulator)
    next = String.to_atom(next_position)
    check = @boundaries[next]
    boundary_violation = Enum.member?(check, curr_position)

    new_position = move_digit(curr_position, next)

    if (String.last(List.first(accumulator)) != new_position) && boundary_violation do
      [List.first(accumulator) <> new_position , new_position]
    else
      [List.first(accumulator) <> "" , new_position]
    end

  end

  defp move_digit("1", :R), do: "2"
  defp move_digit("1", :U), do: "1"
  defp move_digit("1", :L), do: "1"
  defp move_digit("1", :D), do: "4"
  defp move_digit("2", :L), do: "1"
  defp move_digit("2", :R), do: "3"
  defp move_digit("2", :D), do: "5"
  defp move_digit("2", :U), do: "2"
  defp move_digit("3", :D), do: "6"
  defp move_digit("3", :L), do: "2"
  defp move_digit("3", :R), do: "3"
  defp move_digit("3", :U), do: "3"
  defp move_digit("4", :U), do: "1"
  defp move_digit("4", :R), do: "5"
  defp move_digit("4", :D), do: "7"
  defp move_digit("4", :L), do: "4"
  defp move_digit("5", :U), do: "2"
  defp move_digit("5", :L), do: "4"
  defp move_digit("5", :R), do: "6"
  defp move_digit("5", :D), do: "8"
  defp move_digit("6", :U), do: "3"
  defp move_digit("6", :L), do: "5"
  defp move_digit("6", :D), do: "9"
  defp move_digit("6", :R), do: "6"
  defp move_digit("7", :U), do: "4"
  defp move_digit("7", :R), do: "8"
  defp move_digit("7", :L), do: "7"
  defp move_digit("7", :D), do: "7"
  defp move_digit("8", :L), do: "7"
  defp move_digit("8", :R), do: "9"
  defp move_digit("8", :U), do: "5"
  defp move_digit("8", :D), do: "8"
  defp move_digit("9", :L), do: "8"
  defp move_digit("9", :U), do: "6"
  defp move_digit("9", :D), do: "9"
  defp move_digit("9", :R), do: "9"
end
